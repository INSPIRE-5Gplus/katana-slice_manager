version: "3.3"

services:
  mongo:
    image: "mongo:4.0.5"
    container_name: katana-mongo
    restart: always
    volumes:
      - "katana-mongo-datadb:/data/db"
      - "katana-mongo-configdb:/data/configdb"

  zookeeper:
    image: confluentinc/cp-zookeeper:5.4.2
    container_name: katana-zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=zookeeper:2888:3888
      ZOOKEEPER_CLIENT_PORT: 2181
    restart: always
    volumes:
      - katana-zk-data:/var/lib/zookeeper/data
      - katana-zk-log:/var/lib/zookeeper/log
      - katana-zk-secrets:/etc/zookeeper/secrets

  kafka:
    image: confluentinc/cp-enterprise-kafka:5.4.2
    container_name: katana-kafka
    hostname: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://${KATANA_HOST:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHa\
        ndler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "slice:1:1"
    restart: always
    volumes:
      - katana-kafka-data:/var/lib/kafka/data
      - katana-kafka-secrets:/etc/kafka/secrets
    depends_on:
      - zookeeper

  katana-nbi:
    image: "${DOCKER_REG}${DOCKER_REPO}katana-nbi:${DOCKER_TAG}"
    build:
      context: .
      dockerfile: katana-nbi/Dockerfile
    container_name: katana-nbi
    command: gunicorn -b 0.0.0.0:8000 --workers 3 --access-logfile - --reload
      "katana.app:create_app()"
    volumes:
      - "katana-prom-targets:/targets"
    ports:
      - "8000:8000"
    environment:
      PYTHONWARNINGS: "ignore:Unverified HTTPS request"
      KATANA_MONITORING: ${KATANA_MONITORING}
      restart: always
    depends_on:
      - kafka
      - mongo
    # logging:
    #   driver: syslog
    #   options:
    #     syslog-address: "udp://10.30.0.245:5140"
    #     tag: "SliceManager"
    #     syslog-format: "rfc5424"

  katana-mngr:
    image: "${DOCKER_REG}${DOCKER_REPO}katana-mngr:${DOCKER_TAG}"
    container_name: katana-mngr
    build:
      context: .
      dockerfile: katana-mngr/Dockerfile
    command: python3 katana/katana-mngr.py
    volumes:
      - "katana-grafana-templates:/katana-grafana/templates"
    environment:
      KATANA_MONITORING: ${KATANA_MONITORING}
    env_file:
      - "katana-mngr/.env"
      - "katana-grafana/.env"
    restart: always
    depends_on:
      - katana-nbi
      - mongo
    # logging:
    #   driver: syslog
    #   options:
    #     syslog-address: "udp://10.30.0.245:5140"
    #     tag: "SliceManager"
    #     syslog-format: "rfc5424"

  katana-cli:
    image: "${DOCKER_REG}${DOCKER_REPO}katana-cli:${DOCKER_TAG}"
    container_name: katana-cli
    build:
      context: .
      dockerfile: katana-cli/Dockerfile
    command: >
      /bin/bash
    stdin_open: true
    tty: true
    network_mode: "host"
    restart: always
    depends_on:
      - katana-nbi

  katana-swagger:
    image: "${DOCKER_REG}${DOCKER_REPO}katana-swagger:${DOCKER_TAG}"
    container_name: katana-swagger
    build:
      context: .
      dockerfile: katana-swagger/Dockerfile
    restart: always
    environment:
      - SWAGGER_JSON=/my_swagger/swagger.json
      - KATANA_HOST=${KATANA_HOST}
      - KATANA_VERSION=${DOCKER_TAG}
    ports:
      - "8001:8080"
    depends_on:
      - katana-mngr

  katana-prometheus:
    image: "${DOCKER_REG}${DOCKER_REPO}katana-prometheus:${DOCKER_TAG}"
    container_name: katana-prometheus
    build:
      context: .
      dockerfile: katana-prometheus/Dockerfile
    volumes:
      - "katana-prometheus:/prometheus"
      - "katana-prom-targets:/etc/prometheus/targets"
    restart: unless-stopped
    command: >
      --web.enable-lifecycle --config.file=/etc/prometheus/prometheus.yml
      --storage.tsdb.path=/prometheus
      --web.console.libraries=/usr/share/prometheus/console_libraries
      --web.console.templates=/usr/share/prometheus/consoles
    ports:
      - "9090:9090"

  katana-alertmanager:
    image: "${DOCKER_REG}${DOCKER_REPO}katana-alertmanager:${DOCKER_TAG}"
    container_name: katana-alertmanager
    build:
      context: .
      dockerfile: katana-alertmanager/Dockerfile
    restart: unless-stopped
    ports:
      - "9093:9093"
    depends_on:
      - katana-prometheus
    volumes:
      - katana-alertmanager:/alertmanager

  katana-grafana:
    image: "${DOCKER_REG}${DOCKER_REPO}katana-grafana:${DOCKER_TAG}"
    container_name: katana-grafana
    build:
      context: .
      dockerfile: katana-grafana/Dockerfile
    restart: unless-stopped
    ports:
      - "3000:3000"
    env_file: katana-grafana/.env
    depends_on:
      - katana-prometheus

  katana-nfv_mon:
    image: "${DOCKER_REG}${DOCKER_REPO}katana-nfv_mon:${DOCKER_TAG}"
    container_name: katana-nfv_mon
    build:
      context: .
      dockerfile: katana-nfv_mon/Dockerfile
    restart: unless-stopped
    env_file:
      - "katana-grafana/.env"
      - "katana-nfv_mon/.env"
    command: >
      python katana/exporter.py
    ports:
      - "8002:8002"
    depends_on:
      - katana-mngr
      - katana-grafana

volumes:
  katana-mongo-datadb: {}
  katana-mongo-configdb: {}
  katana-zk-data: {}
  katana-zk-log: {}
  katana-zk-secrets: {}
  katana-kafka-data: {}
  katana-kafka-secrets: {}
  katana-prometheus: {}
  katana-prom-targets: {}
  katana-grafana-templates: {}
  katana-alertmanager: {}
